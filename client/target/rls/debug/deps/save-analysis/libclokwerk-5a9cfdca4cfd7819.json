{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5","program":"C:\\Users\\schmi\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","clokwerk","--edition=2018","C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=5a9cfdca4cfd7819","-C","extra-filename=-5a9cfdca4cfd7819","--out-dir","c:\\Users\\schmi\\cse\\krustybeaver\\client\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\schmi\\cse\\krustybeaver\\client\\target\\rls\\debug\\deps","--extern","chrono=c:\\Users\\schmi\\cse\\krustybeaver\\client\\target\\rls\\debug\\deps\\libchrono-31b14a99afb39b19.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\schmi\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\schmi\\cse\\krustybeaver\\client\\target\\rls\\debug\\deps\\libclokwerk-5a9cfdca4cfd7819.rmeta"},"prelude":{"crate_id":{"name":"clokwerk","disambiguator":[4902612609405871386,0]},"crate_root":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src","external_crates":[{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[2135196546772561304,0]}},{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[10100063161427464349,0]}},{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[18166920060419810902,0]}},{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[8277429635966420526,0]}},{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[1216845600797868778,0]}},{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[4668287356885333314,0]}},{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8817118394831127109,0]}},{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8504866355990175305,0]}},{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[13162136604145443950,0]}},{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[12752153024841339346,0]}},{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[14912306932249625247,0]}},{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[13614144605518827024,0]}},{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[12294374008152043540,0]}},{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","num":14,"id":{"name":"chrono","disambiguator":[14264335226556251081,0]}},{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","num":15,"id":{"name":"time","disambiguator":[3851036894031104515,0]}},{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","num":16,"id":{"name":"winapi","disambiguator":[3350545996226543792,0]}},{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","num":17,"id":{"name":"libc","disambiguator":[1436991209045016699,0]}},{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","num":18,"id":{"name":"num_integer","disambiguator":[9507296339410797375,0]}},{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","num":19,"id":{"name":"num_traits","disambiguator":[4488293315933015082,0]}}],"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":0,"byte_end":2749,"line_start":1,"line_end":57,"column_start":1,"column_end":55}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":229},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":2638,"byte_end":2646,"line_start":55,"line_end":55,"column_start":28,"column_end":36},"alias_span":null,"name":"Interval","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":11},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":2648,"byte_end":2656,"line_start":55,"line_end":55,"column_start":38,"column_end":46},"alias_span":null,"name":"NextTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":2658,"byte_end":2667,"line_start":55,"line_end":55,"column_start":48,"column_end":57},"alias_span":null,"name":"TimeUnits","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":2690,"byte_end":2693,"line_start":56,"line_end":56,"column_start":21,"column_end":24},"alias_span":null,"name":"Job","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":2722,"byte_end":2736,"line_start":57,"line_end":57,"column_start":28,"column_end":42},"alias_span":null,"name":"ScheduleHandle","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":315},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":2738,"byte_end":2747,"line_start":57,"line_end":57,"column_start":44,"column_end":53},"alias_span":null,"name":"Scheduler","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":0,"byte_end":2749,"line_start":1,"line_end":57,"column_start":1,"column_end":55},"name":"","qualname":"::","value":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":60},{"krate":0,"index":138},{"krate":0,"index":198},{"krate":0,"index":206},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":213},{"krate":0,"index":216},{"krate":0,"index":219},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":226}],"decl_id":null,"docs":" # Clokwerk, a simple scheduler","sig":null,"attributes":[{"value":"/ # Clokwerk, a simple scheduler","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":0,"byte_end":34,"line_start":1,"line_end":1,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":35,"byte_end":38,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Clokwerk is a simple scheduler, inspired by Python's [Schedule](https://schedule.readthedocs.io/en/stable/)","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":39,"byte_end":150,"line_start":3,"line_end":3,"column_start":1,"column_end":112}},{"value":"/ and Ruby's [clockwork](https://github.com/Rykian/clockwork). It uses a similar DSL for scheduling, rather than","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":151,"byte_end":265,"line_start":4,"line_end":4,"column_start":1,"column_end":115}},{"value":"/ parsing cron strings.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":266,"byte_end":291,"line_start":5,"line_end":5,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":292,"byte_end":295,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":296,"byte_end":308,"line_start":7,"line_end":7,"column_start":1,"column_end":13}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":309,"byte_end":320,"line_start":8,"line_end":8,"column_start":1,"column_end":12}},{"value":"/ // Scheduler, and trait for .seconds(), .minutes(), etc.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":321,"byte_end":381,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/ use clokwerk::{Scheduler, TimeUnits};","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":382,"byte_end":423,"line_start":10,"line_end":10,"column_start":1,"column_end":42}},{"value":"/ // Import week days and WeekDay","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":424,"byte_end":459,"line_start":11,"line_end":11,"column_start":1,"column_end":36}},{"value":"/ use clokwerk::Interval::*;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":460,"byte_end":490,"line_start":12,"line_end":12,"column_start":1,"column_end":31}},{"value":"/ use std::thread;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":491,"byte_end":511,"line_start":13,"line_end":13,"column_start":1,"column_end":21}},{"value":"/ use std::time::Duration;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":512,"byte_end":540,"line_start":14,"line_end":14,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":541,"byte_end":544,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ // Create a new scheduler","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":545,"byte_end":574,"line_start":16,"line_end":16,"column_start":1,"column_end":30}},{"value":"/ let mut scheduler = Scheduler::new();","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":575,"byte_end":616,"line_start":17,"line_end":17,"column_start":1,"column_end":42}},{"value":"/ // or a scheduler with a given timezone","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":617,"byte_end":660,"line_start":18,"line_end":18,"column_start":1,"column_end":44}},{"value":"/ let mut scheduler = Scheduler::with_tz(chrono::Utc);","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":661,"byte_end":717,"line_start":19,"line_end":19,"column_start":1,"column_end":57}},{"value":"/ // Add some tasks to it","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":718,"byte_end":745,"line_start":20,"line_end":20,"column_start":1,"column_end":28}},{"value":"/ scheduler.every(10.minutes()).plus(30.seconds()).run(|| println!(\"Periodic task\"));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":746,"byte_end":833,"line_start":21,"line_end":21,"column_start":1,"column_end":88}},{"value":"/ scheduler.every(1.day()).at(\"3:20 pm\").run(|| println!(\"Daily task\"));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":834,"byte_end":908,"line_start":22,"line_end":22,"column_start":1,"column_end":75}},{"value":"/ scheduler.every(Wednesday).at(\"14:20:17\").run(|| println!(\"Weekly task\"));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":909,"byte_end":987,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"/ scheduler.every(Tuesday).at(\"14:20:17\").and_every(Thursday).at(\"15:00\").run(|| println!(\"Biweekly task\"));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":988,"byte_end":1098,"line_start":24,"line_end":24,"column_start":1,"column_end":111}},{"value":"/ scheduler.every(Weekday).run(|| println!(\"Every weekday at midnight\"));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":1099,"byte_end":1174,"line_start":25,"line_end":25,"column_start":1,"column_end":76}},{"value":"/ scheduler.every(1.day()).at(\"3:20 pm\").run(|| println!(\"I only run once\")).once();","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":1175,"byte_end":1261,"line_start":26,"line_end":26,"column_start":1,"column_end":87}},{"value":"/ scheduler.every(Weekday).at(\"12:00\").count(10).run(|| println!(\"Countdown\"));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":1262,"byte_end":1343,"line_start":27,"line_end":27,"column_start":1,"column_end":82}},{"value":"/ scheduler.every(1.day()).at(\"10:00 am\").repeating_every(30.minutes()).times(6).run(|| println!(\"I run every half hour from 10 AM to 1 PM inclusive.\"));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":1344,"byte_end":1499,"line_start":28,"line_end":28,"column_start":1,"column_end":156}},{"value":"/ scheduler.every(1.day()).at_time(chrono::NaiveTime::from_hms(13, 12, 14)).run(|| println!(\"You can also pass chrono::NaiveTimes to `at_time`.\"));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":1500,"byte_end":1649,"line_start":29,"line_end":29,"column_start":1,"column_end":150}},{"value":"/","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":1650,"byte_end":1653,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ // Manually run the scheduler in an event loop","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":1654,"byte_end":1704,"line_start":31,"line_end":31,"column_start":1,"column_end":51}},{"value":"/ for _ in 1..10 {","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":1705,"byte_end":1725,"line_start":32,"line_end":32,"column_start":1,"column_end":21}},{"value":"/     scheduler.run_pending();","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":1726,"byte_end":1758,"line_start":33,"line_end":33,"column_start":1,"column_end":33}},{"value":"/     thread::sleep(Duration::from_millis(10));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":1759,"byte_end":1808,"line_start":34,"line_end":34,"column_start":1,"column_end":50}},{"value":"/     # break;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":1809,"byte_end":1825,"line_start":35,"line_end":35,"column_start":1,"column_end":17}},{"value":"/ }","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":1826,"byte_end":1831,"line_start":36,"line_end":36,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":1832,"byte_end":1835,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ // Or run it in a background thread","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":1836,"byte_end":1875,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/ let thread_handle = scheduler.watch_thread(Duration::from_millis(100));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":1876,"byte_end":1951,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/ // The scheduler stops when `thread_handle` is dropped, or `stop` is called","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":1952,"byte_end":2031,"line_start":40,"line_end":40,"column_start":1,"column_end":80}},{"value":"/ thread_handle.stop();","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":2032,"byte_end":2057,"line_start":41,"line_end":41,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":2058,"byte_end":2065,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":2066,"byte_end":2069,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ## Caveats","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":2070,"byte_end":2084,"line_start":44,"line_end":44,"column_start":1,"column_end":15}},{"value":"/ Some combinations of times or intervals are permissible, but make little sense, e.g. `every(10.seconds()).at(\"16:00\")`, which would next run at the next 4 PM after the next multiple of 10 seconds.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":2085,"byte_end":2285,"line_start":45,"line_end":45,"column_start":1,"column_end":201}},{"value":"/","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":2286,"byte_end":2289,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ## Similar libraries","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":2290,"byte_end":2314,"line_start":47,"line_end":47,"column_start":1,"column_end":25}},{"value":"/ * [schedule-rs](https://github.com/mehcode/schedule-rs) and [job_scheduler](https://github.com/lholden/job_scheduler) are two other Rust scheduler libraries. Both use `cron` syntax for scheduling.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":2315,"byte_end":2515,"line_start":48,"line_end":48,"column_start":1,"column_end":201}}]},{"kind":"TupleVariant","id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3020,"byte_end":3027,"line_start":8,"line_end":8,"column_start":5,"column_end":12},"name":"Seconds","qualname":"::intervals::Interval::Seconds","value":"Interval::Seconds(u32)","parent":{"krate":0,"index":229},"children":[],"decl_id":null,"docs":" The next multiple of `n` seconds since the start of the Unix epoch\n","sig":null,"attributes":[{"value":"/ The next multiple of `n` seconds since the start of the Unix epoch","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":2945,"byte_end":3015,"line_start":7,"line_end":7,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":233},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3106,"byte_end":3113,"line_start":10,"line_end":10,"column_start":5,"column_end":12},"name":"Minutes","qualname":"::intervals::Interval::Minutes","value":"Interval::Minutes(u32)","parent":{"krate":0,"index":229},"children":[],"decl_id":null,"docs":" The next multiple of `n` minutes since the start of the day\n","sig":null,"attributes":[{"value":"/ The next multiple of `n` minutes since the start of the day","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3038,"byte_end":3101,"line_start":9,"line_end":9,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3190,"byte_end":3195,"line_start":12,"line_end":12,"column_start":5,"column_end":10},"name":"Hours","qualname":"::intervals::Interval::Hours","value":"Interval::Hours(u32)","parent":{"krate":0,"index":229},"children":[],"decl_id":null,"docs":" The next multiple of `n` hours since the start of the day\n","sig":null,"attributes":[{"value":"/ The next multiple of `n` hours since the start of the day","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3124,"byte_end":3185,"line_start":11,"line_end":11,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":239},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3284,"byte_end":3288,"line_start":14,"line_end":14,"column_start":5,"column_end":9},"name":"Days","qualname":"::intervals::Interval::Days","value":"Interval::Days(u32)","parent":{"krate":0,"index":229},"children":[],"decl_id":null,"docs":" The next multiple of `n` days since the start of the start of the era\n","sig":null,"attributes":[{"value":"/ The next multiple of `n` days since the start of the start of the era","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3206,"byte_end":3279,"line_start":13,"line_end":13,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":242},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3377,"byte_end":3382,"line_start":16,"line_end":16,"column_start":5,"column_end":10},"name":"Weeks","qualname":"::intervals::Interval::Weeks","value":"Interval::Weeks(u32)","parent":{"krate":0,"index":229},"children":[],"decl_id":null,"docs":" The next multiple of `n` week since the start of the start of the era\n","sig":null,"attributes":[{"value":"/ The next multiple of `n` week since the start of the start of the era","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3299,"byte_end":3372,"line_start":15,"line_end":15,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":245},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3414,"byte_end":3420,"line_start":18,"line_end":18,"column_start":5,"column_end":11},"name":"Monday","qualname":"::intervals::Interval::Monday","value":"Interval::Monday","parent":{"krate":0,"index":229},"children":[],"decl_id":null,"docs":" Every Monday\n","sig":null,"attributes":[{"value":"/ Every Monday","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3393,"byte_end":3409,"line_start":17,"line_end":17,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3448,"byte_end":3455,"line_start":20,"line_end":20,"column_start":5,"column_end":12},"name":"Tuesday","qualname":"::intervals::Interval::Tuesday","value":"Interval::Tuesday","parent":{"krate":0,"index":229},"children":[],"decl_id":null,"docs":" Every Tuesday\n","sig":null,"attributes":[{"value":"/ Every Tuesday","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3426,"byte_end":3443,"line_start":19,"line_end":19,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3485,"byte_end":3494,"line_start":22,"line_end":22,"column_start":5,"column_end":14},"name":"Wednesday","qualname":"::intervals::Interval::Wednesday","value":"Interval::Wednesday","parent":{"krate":0,"index":229},"children":[],"decl_id":null,"docs":" Every Wednesday\n","sig":null,"attributes":[{"value":"/ Every Wednesday","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3461,"byte_end":3480,"line_start":21,"line_end":21,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":251},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3523,"byte_end":3531,"line_start":24,"line_end":24,"column_start":5,"column_end":13},"name":"Thursday","qualname":"::intervals::Interval::Thursday","value":"Interval::Thursday","parent":{"krate":0,"index":229},"children":[],"decl_id":null,"docs":" Every Thursday\n","sig":null,"attributes":[{"value":"/ Every Thursday","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3500,"byte_end":3518,"line_start":23,"line_end":23,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":253},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3558,"byte_end":3564,"line_start":26,"line_end":26,"column_start":5,"column_end":11},"name":"Friday","qualname":"::intervals::Interval::Friday","value":"Interval::Friday","parent":{"krate":0,"index":229},"children":[],"decl_id":null,"docs":" Every Friday\n","sig":null,"attributes":[{"value":"/ Every Friday","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3537,"byte_end":3553,"line_start":25,"line_end":25,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":255},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3593,"byte_end":3601,"line_start":28,"line_end":28,"column_start":5,"column_end":13},"name":"Saturday","qualname":"::intervals::Interval::Saturday","value":"Interval::Saturday","parent":{"krate":0,"index":229},"children":[],"decl_id":null,"docs":" Every Saturday\n","sig":null,"attributes":[{"value":"/ Every Saturday","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3570,"byte_end":3588,"line_start":27,"line_end":27,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":257},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3628,"byte_end":3634,"line_start":30,"line_end":30,"column_start":5,"column_end":11},"name":"Sunday","qualname":"::intervals::Interval::Sunday","value":"Interval::Sunday","parent":{"krate":0,"index":229},"children":[],"decl_id":null,"docs":" Every Sunday\n","sig":null,"attributes":[{"value":"/ Every Sunday","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3607,"byte_end":3623,"line_start":29,"line_end":29,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":259},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3686,"byte_end":3693,"line_start":32,"line_end":32,"column_start":5,"column_end":12},"name":"Weekday","qualname":"::intervals::Interval::Weekday","value":"Interval::Weekday","parent":{"krate":0,"index":229},"children":[],"decl_id":null,"docs":" Every weekday (Monday through Friday)\n","sig":null,"attributes":[{"value":"/ Every weekday (Monday through Friday)","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3640,"byte_end":3681,"line_start":31,"line_end":31,"column_start":5,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":229},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":2930,"byte_end":2938,"line_start":6,"line_end":6,"column_start":10,"column_end":18},"name":"Interval","qualname":"::intervals::Interval","value":"pub enum Interval {\n    Seconds(u32),\n    Minutes(u32),\n    Hours(u32),\n    Days(u32),\n    Weeks(u32),\n    Monday,\n    Tuesday,\n    Wednesday,\n    Thursday,\n    Friday,\n    Saturday,\n    Sunday,\n    Weekday,\n}","parent":null,"children":[{"krate":0,"index":230},{"krate":0,"index":233},{"krate":0,"index":236},{"krate":0,"index":239},{"krate":0,"index":242},{"krate":0,"index":245},{"krate":0,"index":247},{"krate":0,"index":249},{"krate":0,"index":251},{"krate":0,"index":253},{"krate":0,"index":255},{"krate":0,"index":257},{"krate":0,"index":259}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":11},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3708,"byte_end":3716,"line_start":35,"line_end":35,"column_start":11,"column_end":19},"name":"NextTime","qualname":"::intervals::NextTime","value":"NextTime","parent":null,"children":[{"krate":0,"index":12},{"krate":0,"index":14}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":12},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3726,"byte_end":3730,"line_start":36,"line_end":36,"column_start":8,"column_end":12},"name":"next","qualname":"::intervals::NextTime::next","value":"pub fn next<Tz: TimeZone>(&Self, &DateTime<Tz>) -> DateTime<Tz>","parent":{"krate":0,"index":11},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":3797,"byte_end":3801,"line_start":37,"line_end":37,"column_start":8,"column_end":12},"name":"prev","qualname":"::intervals::NextTime::prev","value":"pub fn prev<Tz: TimeZone>(&Self, &DateTime<Tz>) -> DateTime<Tz>","parent":{"krate":0,"index":11},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":14964,"byte_end":14973,"line_start":328,"line_end":328,"column_start":11,"column_end":20},"name":"TimeUnits","qualname":"::intervals::TimeUnits","value":"TimeUnits: Sized","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53}],"decl_id":null,"docs":" A trait for easily expressing common intervals. Each method generates an appropriate [Interval].\n Plural and non-plural forms behave identically, but exist to make code more grammatical.\n ```rust\n # use clokwerk::Interval;\n # use clokwerk::TimeUnits;\n assert_eq!(5.seconds(), Interval::Seconds(5));\n assert_eq!(12.minutes(), Interval::Minutes(12));\n assert_eq!(2.hours(), Interval::Hours(2));\n assert_eq!(3.days(), Interval::Days(3));\n assert_eq!(1.week(), Interval::Weeks(1));\n ```\n","sig":null,"attributes":[{"value":"/ A trait for easily expressing common intervals. Each method generates an appropriate [Interval].","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":14437,"byte_end":14537,"line_start":317,"line_end":317,"column_start":1,"column_end":101}},{"value":"/ Plural and non-plural forms behave identically, but exist to make code more grammatical.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":14538,"byte_end":14630,"line_start":318,"line_end":318,"column_start":1,"column_end":93}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":14631,"byte_end":14642,"line_start":319,"line_end":319,"column_start":1,"column_end":12}},{"value":"/ # use clokwerk::Interval;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":14643,"byte_end":14672,"line_start":320,"line_end":320,"column_start":1,"column_end":30}},{"value":"/ # use clokwerk::TimeUnits;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":14673,"byte_end":14703,"line_start":321,"line_end":321,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(5.seconds(), Interval::Seconds(5));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":14704,"byte_end":14754,"line_start":322,"line_end":322,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(12.minutes(), Interval::Minutes(12));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":14755,"byte_end":14807,"line_start":323,"line_end":323,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(2.hours(), Interval::Hours(2));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":14808,"byte_end":14854,"line_start":324,"line_end":324,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(3.days(), Interval::Days(3));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":14855,"byte_end":14899,"line_start":325,"line_end":325,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(1.week(), Interval::Weeks(1));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":14900,"byte_end":14945,"line_start":326,"line_end":326,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":14946,"byte_end":14953,"line_start":327,"line_end":327,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":14990,"byte_end":14997,"line_start":329,"line_end":329,"column_start":8,"column_end":15},"name":"seconds","qualname":"::intervals::TimeUnits::seconds","value":"pub fn seconds(Self) -> Interval","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":15024,"byte_end":15031,"line_start":330,"line_end":330,"column_start":8,"column_end":15},"name":"minutes","qualname":"::intervals::TimeUnits::minutes","value":"pub fn minutes(Self) -> Interval","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":15058,"byte_end":15063,"line_start":331,"line_end":331,"column_start":8,"column_end":13},"name":"hours","qualname":"::intervals::TimeUnits::hours","value":"pub fn hours(Self) -> Interval","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":15090,"byte_end":15094,"line_start":332,"line_end":332,"column_start":8,"column_end":12},"name":"days","qualname":"::intervals::TimeUnits::days","value":"pub fn days(Self) -> Interval","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":15121,"byte_end":15126,"line_start":333,"line_end":333,"column_start":8,"column_end":13},"name":"weeks","qualname":"::intervals::TimeUnits::weeks","value":"pub fn weeks(Self) -> Interval","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":15153,"byte_end":15159,"line_start":334,"line_end":334,"column_start":8,"column_end":14},"name":"second","qualname":"::intervals::TimeUnits::second","value":"pub fn second(Self) -> Interval","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":15216,"byte_end":15222,"line_start":337,"line_end":337,"column_start":8,"column_end":14},"name":"minute","qualname":"::intervals::TimeUnits::minute","value":"pub fn minute(Self) -> Interval","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":15279,"byte_end":15283,"line_start":340,"line_end":340,"column_start":8,"column_end":12},"name":"hour","qualname":"::intervals::TimeUnits::hour","value":"pub fn hour(Self) -> Interval","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":15338,"byte_end":15341,"line_start":343,"line_end":343,"column_start":8,"column_end":11},"name":"day","qualname":"::intervals::TimeUnits::day","value":"pub fn day(Self) -> Interval","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":15395,"byte_end":15399,"line_start":346,"line_end":346,"column_start":8,"column_end":12},"name":"week","qualname":"::intervals::TimeUnits::week","value":"pub fn week(Self) -> Interval","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":27508,"byte_end":27511,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"Job","qualname":"::job::Job","value":"Job {  }","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102}],"decl_id":null,"docs":" A job to run on the scheduler.\n Create these by calling [`Scheduler::every()`](::Scheduler::every).\n","sig":null,"attributes":[{"value":"/ A job to run on the scheduler.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":27390,"byte_end":27424,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"/ Create these by calling [`Scheduler::every()`](::Scheduler::every).","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":27425,"byte_end":27496,"line_start":27,"line_end":27,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":29829,"byte_end":29831,"line_start":97,"line_end":97,"column_start":12,"column_end":14},"name":"at","qualname":"<Job<Tz, Tp>>::at","value":"pub fn at(&mut Self, &str) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the time of day when a task should run, e.g.\n ```rust\n # use clokwerk::*;\n # use clokwerk::Interval::*;\n # use chrono::NaiveTime;\n let mut scheduler = Scheduler::new();\n scheduler.every(1.day()).at(\"14:32\").run(|| println!(\"Tea time!\"));\n scheduler.every(Wednesday).at(\"6:32:21 PM\").run(|| println!(\"Writing examples is hard\"));\n ```\n Times can be specified using strings, with or without seconds, and in either 24-hour or 12-hour time.\n They can also be any other type that implements `TryInto<ClokwerkTime>`, which includes [`chrono::NaiveTime`].\n This method will panic if TryInto fails, e.g. because the time string could not be parsed.\n If the value comes from an untrusted source, e.g. user input, [`Job::try_at`] will return a result instead.","sig":null,"attributes":[{"value":"/ Specify the time of day when a task should run, e.g.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":28900,"byte_end":28956,"line_start":82,"line_end":82,"column_start":5,"column_end":61}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":28961,"byte_end":28972,"line_start":83,"line_end":83,"column_start":5,"column_end":16}},{"value":"/ # use clokwerk::*;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":28977,"byte_end":28999,"line_start":84,"line_end":84,"column_start":5,"column_end":27}},{"value":"/ # use clokwerk::Interval::*;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":29004,"byte_end":29036,"line_start":85,"line_end":85,"column_start":5,"column_end":37}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":29041,"byte_end":29069,"line_start":86,"line_end":86,"column_start":5,"column_end":33}},{"value":"/ let mut scheduler = Scheduler::new();","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":29074,"byte_end":29115,"line_start":87,"line_end":87,"column_start":5,"column_end":46}},{"value":"/ scheduler.every(1.day()).at(\"14:32\").run(|| println!(\"Tea time!\"));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":29120,"byte_end":29191,"line_start":88,"line_end":88,"column_start":5,"column_end":76}},{"value":"/ scheduler.every(Wednesday).at(\"6:32:21 PM\").run(|| println!(\"Writing examples is hard\"));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":29196,"byte_end":29289,"line_start":89,"line_end":89,"column_start":5,"column_end":98}},{"value":"/ ```","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":29294,"byte_end":29301,"line_start":90,"line_end":90,"column_start":5,"column_end":12}},{"value":"/ Times can be specified using strings, with or without seconds, and in either 24-hour or 12-hour time.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":29306,"byte_end":29411,"line_start":91,"line_end":91,"column_start":5,"column_end":110}},{"value":"/ They can also be any other type that implements `TryInto<ClokwerkTime>`, which includes [`chrono::NaiveTime`].","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":29416,"byte_end":29530,"line_start":92,"line_end":92,"column_start":5,"column_end":119}},{"value":"/ This method will panic if TryInto fails, e.g. because the time string could not be parsed.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":29535,"byte_end":29629,"line_start":93,"line_end":93,"column_start":5,"column_end":99}},{"value":"/ If the value comes from an untrusted source, e.g. user input, [`Job::try_at`] will return a result instead.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":29634,"byte_end":29745,"line_start":94,"line_end":94,"column_start":5,"column_end":116}},{"value":"/","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":29750,"byte_end":29753,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ This method is mutually exclusive with [`Job::plus()`].","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":29758,"byte_end":29817,"line_start":96,"line_end":96,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":30491,"byte_end":30497,"line_start":112,"line_end":112,"column_start":12,"column_end":18},"name":"try_at","qualname":"<Job<Tz, Tp>>::try_at","value":"pub fn try_at(&mut Self, &str) -> Result<&mut Self, chrono::ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Identical to [`Job::at`] except that it returns a Result instead of panicking if the conversion failed.\n ```rust\n # use clokwerk::*;\n # use clokwerk::Interval::*;\n let mut scheduler = Scheduler::new();\n scheduler.every(1.day()).try_at(\"14:32\")?.run(|| println!(\"Tea time!\"));\n # Ok::<(), chrono::ParseError>(())\n ```\n Times can be specified with or without seconds, and in either 24-hour or 12-hour time.\n Mutually exclusive with [`Job::plus()`].\n","sig":null,"attributes":[{"value":"/ Identical to [`Job::at`] except that it returns a Result instead of panicking if the conversion failed.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":29966,"byte_end":30073,"line_start":102,"line_end":102,"column_start":5,"column_end":112}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":30078,"byte_end":30089,"line_start":103,"line_end":103,"column_start":5,"column_end":16}},{"value":"/ # use clokwerk::*;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":30094,"byte_end":30116,"line_start":104,"line_end":104,"column_start":5,"column_end":27}},{"value":"/ # use clokwerk::Interval::*;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":30121,"byte_end":30153,"line_start":105,"line_end":105,"column_start":5,"column_end":37}},{"value":"/ let mut scheduler = Scheduler::new();","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":30158,"byte_end":30199,"line_start":106,"line_end":106,"column_start":5,"column_end":46}},{"value":"/ scheduler.every(1.day()).try_at(\"14:32\")?.run(|| println!(\"Tea time!\"));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":30204,"byte_end":30280,"line_start":107,"line_end":107,"column_start":5,"column_end":81}},{"value":"/ # Ok::<(), chrono::ParseError>(())","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":30285,"byte_end":30323,"line_start":108,"line_end":108,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":30328,"byte_end":30335,"line_start":109,"line_end":109,"column_start":5,"column_end":12}},{"value":"/ Times can be specified with or without seconds, and in either 24-hour or 12-hour time.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":30340,"byte_end":30430,"line_start":110,"line_end":110,"column_start":5,"column_end":95}},{"value":"/ Mutually exclusive with [`Job::plus()`].","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":30435,"byte_end":30479,"line_start":111,"line_end":111,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":31089,"byte_end":31096,"line_start":126,"line_end":126,"column_start":12,"column_end":19},"name":"at_time","qualname":"<Job<Tz, Tp>>::at_time","value":"pub fn at_time(&mut Self, NaiveTime) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Similar to [`Job::at`], but it takes a chrono::NaiveTime instead of a `&str`.\n Because it doesn't need to parse a string, this method will always succeed.\n ```rust\n # use clokwerk::*;\n # use clokwerk::Interval::*;\n # use chrono::NaiveTime;\n let mut scheduler = Scheduler::new();\n scheduler.every(Weekday).at_time(NaiveTime::from_hms(23, 42, 16)).run(|| println!(\"Also works with NaiveTime\"));\n ```\n","sig":null,"attributes":[{"value":"/ Similar to [`Job::at`], but it takes a chrono::NaiveTime instead of a `&str`.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":30619,"byte_end":30700,"line_start":116,"line_end":116,"column_start":5,"column_end":86}},{"value":"/ Because it doesn't need to parse a string, this method will always succeed.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":30705,"byte_end":30784,"line_start":117,"line_end":117,"column_start":5,"column_end":84}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":30789,"byte_end":30800,"line_start":118,"line_end":118,"column_start":5,"column_end":16}},{"value":"/ # use clokwerk::*;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":30805,"byte_end":30827,"line_start":119,"line_end":119,"column_start":5,"column_end":27}},{"value":"/ # use clokwerk::Interval::*;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":30832,"byte_end":30864,"line_start":120,"line_end":120,"column_start":5,"column_end":37}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":30869,"byte_end":30897,"line_start":121,"line_end":121,"column_start":5,"column_end":33}},{"value":"/ let mut scheduler = Scheduler::new();","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":30902,"byte_end":30943,"line_start":122,"line_end":122,"column_start":5,"column_end":46}},{"value":"/ scheduler.every(Weekday).at_time(NaiveTime::from_hms(23, 42, 16)).run(|| println!(\"Also works with NaiveTime\"));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":30948,"byte_end":31064,"line_start":123,"line_end":123,"column_start":5,"column_end":121}},{"value":"/ ```","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":31069,"byte_end":31076,"line_start":124,"line_end":124,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":31691,"byte_end":31695,"line_start":144,"line_end":144,"column_start":12,"column_end":16},"name":"plus","qualname":"<Job<Tz, Tp>>::plus","value":"pub fn plus(&mut Self, Interval) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Add additional precision time to when a task should run, e.g.\n ```rust\n # use clokwerk::*;\n # use clokwerk::Interval::*;\n let mut scheduler = Scheduler::new();\n scheduler.every(1.day())\n     .plus(6.hours())\n     .plus(13.minutes())\n   .run(|| println!(\"Time to wake up!\"));\n ```\n Mutually exclusive with [`Job::at()`].\n","sig":null,"attributes":[{"value":"/ Add additional precision time to when a task should run, e.g.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":31286,"byte_end":31351,"line_start":133,"line_end":133,"column_start":5,"column_end":70}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":31356,"byte_end":31367,"line_start":134,"line_end":134,"column_start":5,"column_end":16}},{"value":"/ # use clokwerk::*;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":31372,"byte_end":31394,"line_start":135,"line_end":135,"column_start":5,"column_end":27}},{"value":"/ # use clokwerk::Interval::*;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":31399,"byte_end":31431,"line_start":136,"line_end":136,"column_start":5,"column_end":37}},{"value":"/ let mut scheduler = Scheduler::new();","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":31436,"byte_end":31477,"line_start":137,"line_end":137,"column_start":5,"column_end":46}},{"value":"/ scheduler.every(1.day())","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":31482,"byte_end":31510,"line_start":138,"line_end":138,"column_start":5,"column_end":33}},{"value":"/     .plus(6.hours())","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":31515,"byte_end":31539,"line_start":139,"line_end":139,"column_start":5,"column_end":29}},{"value":"/     .plus(13.minutes())","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":31544,"byte_end":31571,"line_start":140,"line_end":140,"column_start":5,"column_end":32}},{"value":"/   .run(|| println!(\"Time to wake up!\"));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":31576,"byte_end":31620,"line_start":141,"line_end":141,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":31625,"byte_end":31632,"line_start":142,"line_end":142,"column_start":5,"column_end":12}},{"value":"/ Mutually exclusive with [`Job::at()`].","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":31637,"byte_end":31679,"line_start":143,"line_end":143,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":32038,"byte_end":32047,"line_start":154,"line_end":154,"column_start":12,"column_end":21},"name":"and_every","qualname":"<Job<Tz, Tp>>::and_every","value":"pub fn and_every(&mut Self, Interval) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Add an additional scheduling to the task. All schedules will be considered when determining\n when the task should next run.\n","sig":null,"attributes":[{"value":"/ Add an additional scheduling to the task. All schedules will be considered when determining","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":31892,"byte_end":31987,"line_start":152,"line_end":152,"column_start":5,"column_end":100}},{"value":"/ when the task should next run.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":31992,"byte_end":32026,"line_start":153,"line_end":153,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":32245,"byte_end":32249,"line_start":160,"line_end":160,"column_start":12,"column_end":16},"name":"once","qualname":"<Job<Tz, Tp>>::once","value":"pub fn once(&mut Self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Execute the job only once. Equivalent to `_.count(1)`.\n","sig":null,"attributes":[{"value":"/ Execute the job only once. Equivalent to `_.count(1)`.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":32175,"byte_end":32233,"line_start":159,"line_end":159,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":32416,"byte_end":32423,"line_start":166,"line_end":166,"column_start":12,"column_end":19},"name":"forever","qualname":"<Job<Tz, Tp>>::forever","value":"pub fn forever(&mut Self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Execute the job forever. This is the default behaviour.\n","sig":null,"attributes":[{"value":"/ Execute the job forever. This is the default behaviour.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":32345,"byte_end":32404,"line_start":165,"line_end":165,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":32569,"byte_end":32574,"line_start":172,"line_end":172,"column_start":12,"column_end":17},"name":"count","qualname":"<Job<Tz, Tp>>::count","value":"pub fn count(&mut Self, usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Execute the job only `count` times.\n","sig":null,"attributes":[{"value":"/ Execute the job only `count` times.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":32518,"byte_end":32557,"line_start":171,"line_end":171,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":34547,"byte_end":34562,"line_start":230,"line_end":230,"column_start":12,"column_end":27},"name":"repeating_every","qualname":"<Job<Tz, Tp>>::repeating_every","value":"pub fn repeating_every(&mut Self, Interval) -> Repeating<, Tz, Tp>","parent":null,"children":[],"decl_id":null,"docs":" After running once, run again with the specified interval.","sig":null,"attributes":[{"value":"/ After running once, run again with the specified interval.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":32920,"byte_end":32982,"line_start":184,"line_end":184,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":32987,"byte_end":32990,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":32995,"byte_end":33006,"line_start":186,"line_end":186,"column_start":5,"column_end":16}},{"value":"/ # use clokwerk::*;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33011,"byte_end":33033,"line_start":187,"line_end":187,"column_start":5,"column_end":27}},{"value":"/ # use clokwerk::Interval::*;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33038,"byte_end":33070,"line_start":188,"line_end":188,"column_start":5,"column_end":37}},{"value":"/ # fn hit_snooze() {}","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33075,"byte_end":33099,"line_start":189,"line_end":189,"column_start":5,"column_end":29}},{"value":"/ let mut scheduler = Scheduler::new();","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33104,"byte_end":33145,"line_start":190,"line_end":190,"column_start":5,"column_end":46}},{"value":"/ scheduler.every(Weekday)","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33150,"byte_end":33178,"line_start":191,"line_end":191,"column_start":5,"column_end":33}},{"value":"/   .at(\"7:40\")","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33183,"byte_end":33200,"line_start":192,"line_end":192,"column_start":5,"column_end":22}},{"value":"/   .repeating_every(10.minutes())","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33205,"byte_end":33241,"line_start":193,"line_end":193,"column_start":5,"column_end":41}},{"value":"/   .times(5)","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33246,"byte_end":33261,"line_start":194,"line_end":194,"column_start":5,"column_end":20}},{"value":"/   .run(|| hit_snooze());","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33266,"byte_end":33294,"line_start":195,"line_end":195,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33299,"byte_end":33306,"line_start":196,"line_end":196,"column_start":5,"column_end":12}},{"value":"/ will hit snooze five times every morning, at 7:40, 7:50, 8:00, 8:10 and 8:20.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33311,"byte_end":33392,"line_start":197,"line_end":197,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33397,"byte_end":33400,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Unlike [`Job::at`] and [`Job::plus`],","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33405,"byte_end":33446,"line_start":199,"line_end":199,"column_start":5,"column_end":46}},{"value":"/ this affects all intervals associated with the job, not just the most recent one.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33451,"byte_end":33536,"line_start":200,"line_end":200,"column_start":5,"column_end":90}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33541,"byte_end":33552,"line_start":201,"line_end":201,"column_start":5,"column_end":16}},{"value":"/ # use clokwerk::*;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33557,"byte_end":33579,"line_start":202,"line_end":202,"column_start":5,"column_end":27}},{"value":"/ # use clokwerk::Interval::*;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33584,"byte_end":33616,"line_start":203,"line_end":203,"column_start":5,"column_end":37}},{"value":"/ # fn hit_snooze() {}","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33621,"byte_end":33645,"line_start":204,"line_end":204,"column_start":5,"column_end":29}},{"value":"/ let mut scheduler = Scheduler::new();","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33650,"byte_end":33691,"line_start":205,"line_end":205,"column_start":5,"column_end":46}},{"value":"/ scheduler.every(Weekday)","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33696,"byte_end":33724,"line_start":206,"line_end":206,"column_start":5,"column_end":33}},{"value":"/   .at(\"7:40\")","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33729,"byte_end":33746,"line_start":207,"line_end":207,"column_start":5,"column_end":22}},{"value":"/   .and_every(Saturday)","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33751,"byte_end":33777,"line_start":208,"line_end":208,"column_start":5,"column_end":31}},{"value":"/   .at(\"9:15\")","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33782,"byte_end":33799,"line_start":209,"line_end":209,"column_start":5,"column_end":22}},{"value":"/   .and_every(Sunday)","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33804,"byte_end":33828,"line_start":210,"line_end":210,"column_start":5,"column_end":29}},{"value":"/   .at(\"9:15\")","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33833,"byte_end":33850,"line_start":211,"line_end":211,"column_start":5,"column_end":22}},{"value":"/   .repeating_every(10.minutes())","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33855,"byte_end":33891,"line_start":212,"line_end":212,"column_start":5,"column_end":41}},{"value":"/   .times(5)","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33896,"byte_end":33911,"line_start":213,"line_end":213,"column_start":5,"column_end":20}},{"value":"/   .run(|| hit_snooze());","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33916,"byte_end":33944,"line_start":214,"line_end":214,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33949,"byte_end":33956,"line_start":215,"line_end":215,"column_start":5,"column_end":12}},{"value":"/ hits snooze five times every day, not just Sundays.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":33961,"byte_end":34016,"line_start":216,"line_end":216,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":34021,"byte_end":34024,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ If a job is still repeating, it will ignore otherwise scheduled runs.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":34029,"byte_end":34102,"line_start":218,"line_end":218,"column_start":5,"column_end":78}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":34107,"byte_end":34118,"line_start":219,"line_end":219,"column_start":5,"column_end":16}},{"value":"/ # use clokwerk::*;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":34123,"byte_end":34145,"line_start":220,"line_end":220,"column_start":5,"column_end":27}},{"value":"/ # use clokwerk::Interval::*;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":34150,"byte_end":34182,"line_start":221,"line_end":221,"column_start":5,"column_end":37}},{"value":"/ # fn hit_snooze() {}","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":34187,"byte_end":34211,"line_start":222,"line_end":222,"column_start":5,"column_end":29}},{"value":"/ let mut scheduler = Scheduler::new();","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":34216,"byte_end":34257,"line_start":223,"line_end":223,"column_start":5,"column_end":46}},{"value":"/ scheduler.every(1.hour())","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":34262,"byte_end":34291,"line_start":224,"line_end":224,"column_start":5,"column_end":34}},{"value":"/   .repeating_every(45.minutes())","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":34296,"byte_end":34332,"line_start":225,"line_end":225,"column_start":5,"column_end":41}},{"value":"/   .times(3)","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":34337,"byte_end":34352,"line_start":226,"line_end":226,"column_start":5,"column_end":20}},{"value":"/   .run(|| println!(\"Hello\"));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":34357,"byte_end":34390,"line_start":227,"line_end":227,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":34395,"byte_end":34402,"line_start":228,"line_end":228,"column_start":5,"column_end":12}},{"value":"/ If this is scheduled to run at 6 AM, it will print `Hello` at 6:00, 6:45, and 7:30, and then again at 8:00, 8:45, 9:30, etc.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":34407,"byte_end":34535,"line_start":229,"line_end":229,"column_start":5,"column_end":133}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":34767,"byte_end":34770,"line_start":238,"line_end":238,"column_start":12,"column_end":15},"name":"run","qualname":"<Job<Tz, Tp>>::run","value":"pub fn run<F>(&mut Self, F) -> &mut Self where F: 'static + FnMut() -> () +\nSend","parent":null,"children":[],"decl_id":null,"docs":" Specify a task to run, and schedule its next run\n","sig":null,"attributes":[{"value":"/ Specify a task to run, and schedule its next run","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":34703,"byte_end":34755,"line_start":237,"line_end":237,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":35512,"byte_end":35522,"line_start":262,"line_end":262,"column_start":12,"column_end":22},"name":"is_pending","qualname":"<Job<Tz, Tp>>::is_pending","value":"pub fn is_pending(&Self, &DateTime<Tz>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether a job is scheduled to run again. This is usually only called by\n [Scheduler::run_pending()](::Scheduler::run_pending).\n","sig":null,"attributes":[{"value":"/ Test whether a job is scheduled to run again. This is usually only called by","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":35358,"byte_end":35438,"line_start":260,"line_end":260,"column_start":5,"column_end":85}},{"value":"/ [Scheduler::run_pending()](::Scheduler::run_pending).","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":35443,"byte_end":35500,"line_start":261,"line_end":261,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":35815,"byte_end":35822,"line_start":271,"line_end":271,"column_start":12,"column_end":19},"name":"execute","qualname":"<Job<Tz, Tp>>::execute","value":"pub fn execute(&mut Self, &DateTime<Tz>)","parent":null,"children":[],"decl_id":null,"docs":" Run a task and re-schedule it. This is usually only called by\n [Scheduler::run_pending()](::Scheduler::run_pending).\n","sig":null,"attributes":[{"value":"/ Run a task and re-schedule it. This is usually only called by","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":35676,"byte_end":35741,"line_start":269,"line_end":269,"column_start":5,"column_end":70}},{"value":"/ [Scheduler::run_pending()](::Scheduler::run_pending).","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":35746,"byte_end":35803,"line_start":270,"line_end":270,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":38046,"byte_end":38055,"line_start":323,"line_end":323,"column_start":12,"column_end":21},"name":"Repeating","qualname":"::job::Repeating","value":"Repeating {  }","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":38457,"byte_end":38462,"line_start":335,"line_end":335,"column_start":12,"column_end":17},"name":"times","qualname":"<Repeating>::times","value":"pub fn times(Self, usize) -> &'a mut Job<Tz, Tp>","parent":null,"children":[],"decl_id":null,"docs":" Indicate the number of additoinal times the job should be run every time it's scheduled.\n Passing a value of 0 here is the same as not specifying a repeat at all.\n","sig":null,"attributes":[{"value":"/ Indicate the number of additoinal times the job should be run every time it's scheduled.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":38272,"byte_end":38364,"line_start":333,"line_end":333,"column_start":5,"column_end":97}},{"value":"/ Passing a value of 0 here is the same as not specifying a repeat at all.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":38369,"byte_end":38445,"line_start":334,"line_end":334,"column_start":5,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":315},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":41260,"byte_end":41269,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"Scheduler","qualname":"::scheduler::Scheduler","value":"Scheduler {  }","parent":null,"children":[{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320}],"decl_id":null,"docs":" Job scheduler\n","sig":null,"attributes":[{"value":"/ Job scheduler","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":41214,"byte_end":41231,"line_start":11,"line_end":11,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":41761,"byte_end":41764,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Scheduler>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new scheduler. Dates and times will be interpretted using the local timezone\n","sig":null,"attributes":[{"value":"/ Create a new scheduler. Dates and times will be interpretted using the local timezone","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":41660,"byte_end":41749,"line_start":34,"line_end":34,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":41923,"byte_end":41930,"line_start":40,"line_end":40,"column_start":12,"column_end":19},"name":"with_tz","qualname":"<Scheduler>::with_tz","value":"pub fn with_tz<Tz: chrono::TimeZone>(Tz) -> Scheduler<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Create a new scheduler. Dates and times will be interpretted using the specified timezone.\n","sig":null,"attributes":[{"value":"/ Create a new scheduler. Dates and times will be interpretted using the specified timezone.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":41817,"byte_end":41911,"line_start":39,"line_end":39,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":42313,"byte_end":42333,"line_start":51,"line_end":51,"column_start":12,"column_end":32},"name":"with_tz_and_provider","qualname":"<Scheduler>::with_tz_and_provider","value":"pub fn with_tz_and_provider<Tz: chrono::TimeZone, Tp: TimeProvider>(Tz)\n-> Scheduler<Tz, Tp>","parent":null,"children":[],"decl_id":null,"docs":" Create a new scheduler. Dates and times will be interpretted using the specified timezone.\n In addition, you can provide an alternate time provider. This is mostly useful for writing\n tests.\n","sig":null,"attributes":[{"value":"/ Create a new scheduler. Dates and times will be interpretted using the specified timezone.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":42093,"byte_end":42187,"line_start":48,"line_end":48,"column_start":5,"column_end":99}},{"value":"/ In addition, you can provide an alternate time provider. This is mostly useful for writing","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":42192,"byte_end":42286,"line_start":49,"line_end":49,"column_start":5,"column_end":99}},{"value":"/ tests.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":42291,"byte_end":42301,"line_start":50,"line_end":50,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":43186,"byte_end":43191,"line_start":77,"line_end":77,"column_start":12,"column_end":17},"name":"every","qualname":"<Scheduler<Tz, Tp>>::every","value":"pub fn every(&mut Self, Interval) -> &mut Job<Tz, Tp>","parent":null,"children":[],"decl_id":null,"docs":" Add a new job to the scheduler to be run on the given interval\n ```rust\n # use clokwerk::*;\n # use clokwerk::Interval::*;\n let mut scheduler = Scheduler::new();\n scheduler.every(10.minutes()).plus(30.seconds()).run(|| println!(\"Periodic task\"));\n scheduler.every(1.day()).at(\"3:20 pm\").run(|| println!(\"Daily task\"));\n scheduler.every(Wednesday).at(\"14:20:17\").run(|| println!(\"Weekly task\"));\n scheduler.every(Weekday).run(|| println!(\"Every weekday at midnight\"));\n ```\n","sig":null,"attributes":[{"value":"/ Add a new job to the scheduler to be run on the given interval","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":42636,"byte_end":42702,"line_start":67,"line_end":67,"column_start":5,"column_end":71}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":42707,"byte_end":42718,"line_start":68,"line_end":68,"column_start":5,"column_end":16}},{"value":"/ # use clokwerk::*;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":42723,"byte_end":42745,"line_start":69,"line_end":69,"column_start":5,"column_end":27}},{"value":"/ # use clokwerk::Interval::*;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":42750,"byte_end":42782,"line_start":70,"line_end":70,"column_start":5,"column_end":37}},{"value":"/ let mut scheduler = Scheduler::new();","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":42787,"byte_end":42828,"line_start":71,"line_end":71,"column_start":5,"column_end":46}},{"value":"/ scheduler.every(10.minutes()).plus(30.seconds()).run(|| println!(\"Periodic task\"));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":42833,"byte_end":42920,"line_start":72,"line_end":72,"column_start":5,"column_end":92}},{"value":"/ scheduler.every(1.day()).at(\"3:20 pm\").run(|| println!(\"Daily task\"));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":42925,"byte_end":42999,"line_start":73,"line_end":73,"column_start":5,"column_end":79}},{"value":"/ scheduler.every(Wednesday).at(\"14:20:17\").run(|| println!(\"Weekly task\"));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":43004,"byte_end":43082,"line_start":74,"line_end":74,"column_start":5,"column_end":83}},{"value":"/ scheduler.every(Weekday).run(|| println!(\"Every weekday at midnight\"));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":43087,"byte_end":43162,"line_start":75,"line_end":75,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":43167,"byte_end":43174,"line_start":76,"line_end":76,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":44108,"byte_end":44119,"line_start":101,"line_end":101,"column_start":12,"column_end":23},"name":"run_pending","qualname":"<Scheduler<Tz, Tp>>::run_pending","value":"pub fn run_pending(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Run all jobs that should run at this time.","sig":null,"attributes":[{"value":"/ Run all jobs that should run at this time.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":43423,"byte_end":43469,"line_start":84,"line_end":84,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":43474,"byte_end":43477,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ This method blocks while jobs are being run. If a job takes a long time, it may prevent","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":43482,"byte_end":43573,"line_start":86,"line_end":86,"column_start":5,"column_end":96}},{"value":"/ other tasks from running as scheduled. If you have a long-running task, you might consider","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":43578,"byte_end":43672,"line_start":87,"line_end":87,"column_start":5,"column_end":99}},{"value":"/ having the job move the work into another thread so that it can return promptly.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":43677,"byte_end":43761,"line_start":88,"line_end":88,"column_start":5,"column_end":89}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":43766,"byte_end":43777,"line_start":89,"line_end":89,"column_start":5,"column_end":16}},{"value":"/ # use clokwerk::*;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":43782,"byte_end":43804,"line_start":90,"line_end":90,"column_start":5,"column_end":27}},{"value":"/ # use clokwerk::Interval::*;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":43809,"byte_end":43841,"line_start":91,"line_end":91,"column_start":5,"column_end":37}},{"value":"/ use std::thread;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":43846,"byte_end":43866,"line_start":92,"line_end":92,"column_start":5,"column_end":25}},{"value":"/ use std::time::Duration;","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":43871,"byte_end":43899,"line_start":93,"line_end":93,"column_start":5,"column_end":33}},{"value":"/ # let mut scheduler = Scheduler::new();","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":43904,"byte_end":43947,"line_start":94,"line_end":94,"column_start":5,"column_end":48}},{"value":"/ loop {","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":43952,"byte_end":43962,"line_start":95,"line_end":95,"column_start":5,"column_end":15}},{"value":"/     scheduler.run_pending();","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":43967,"byte_end":43999,"line_start":96,"line_end":96,"column_start":5,"column_end":37}},{"value":"/     thread::sleep(Duration::from_millis(100));","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":44004,"byte_end":44054,"line_start":97,"line_end":97,"column_start":5,"column_end":55}},{"value":"/     # break","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":44059,"byte_end":44074,"line_start":98,"line_end":98,"column_start":5,"column_end":20}},{"value":"/ }","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":44079,"byte_end":44084,"line_start":99,"line_end":99,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":44089,"byte_end":44096,"line_start":100,"line_end":100,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":45307,"byte_end":45319,"line_start":129,"line_end":129,"column_start":12,"column_end":24},"name":"watch_thread","qualname":"<Scheduler<Tz>>::watch_thread","value":"pub fn watch_thread(Self, Duration) -> ScheduleHandle","parent":null,"children":[],"decl_id":null,"docs":" Start a background thread to call [Scheduler::run_pending()] repeatedly.\n The frequency argument controls how long the thread will sleep between calls\n to [Scheduler::run_pending()].\n If the returned [ScheduleHandle] is dropped, the resulting thread will end\n cleanly when [Scheduler::run_pending()] would have next been called.","sig":null,"attributes":[{"value":"/ Start a background thread to call [Scheduler::run_pending()] repeatedly.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":44441,"byte_end":44517,"line_start":116,"line_end":116,"column_start":5,"column_end":81}},{"value":"/ The frequency argument controls how long the thread will sleep between calls","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":44522,"byte_end":44602,"line_start":117,"line_end":117,"column_start":5,"column_end":85}},{"value":"/ to [Scheduler::run_pending()].","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":44607,"byte_end":44641,"line_start":118,"line_end":118,"column_start":5,"column_end":39}},{"value":"/ If the returned [ScheduleHandle] is dropped, the resulting thread will end","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":44646,"byte_end":44724,"line_start":119,"line_end":119,"column_start":5,"column_end":83}},{"value":"/ cleanly when [Scheduler::run_pending()] would have next been called.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":44729,"byte_end":44801,"line_start":120,"line_end":120,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":44806,"byte_end":44809,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ Passing large durations for `frequency` can cause long delays when [ScheduleHandle::stop()]","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":44814,"byte_end":44909,"line_start":122,"line_end":122,"column_start":5,"column_end":100}},{"value":"/ is called, or the [ScheduleHandle] is dropped, as it waits for the thread to finish sleeping.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":44914,"byte_end":45011,"line_start":123,"line_end":123,"column_start":5,"column_end":102}},{"value":"/ This could affect how long it takes for the program to exit.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":45016,"byte_end":45080,"line_start":124,"line_end":124,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":45085,"byte_end":45088,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ Reasonable values for `frequency` would be between 100 ms and 10 seconds.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":45093,"byte_end":45170,"line_start":126,"line_end":126,"column_start":5,"column_end":82}},{"value":"/ If in doubt, choose a smaller value.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":45175,"byte_end":45215,"line_start":127,"line_end":127,"column_start":5,"column_end":45}},{"value":"must_use = \"The scheduler is halted when the returned handle is dropped\"","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":45220,"byte_end":45295,"line_start":128,"line_end":128,"column_start":5,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":45950,"byte_end":45964,"line_start":148,"line_end":148,"column_start":12,"column_end":26},"name":"ScheduleHandle","qualname":"::scheduler::ScheduleHandle","value":"ScheduleHandle {  }","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193}],"decl_id":null,"docs":" Guard object for the scheduler background thread. The thread is terminated if this object\n is dropped, or [ScheduleHandle::stop()] is called\n","sig":null,"attributes":[{"value":"/ Guard object for the scheduler background thread. The thread is terminated if this object","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":45791,"byte_end":45884,"line_start":146,"line_end":146,"column_start":1,"column_end":94}},{"value":"/ is dropped, or [ScheduleHandle::stop()] is called","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":45885,"byte_end":45938,"line_start":147,"line_end":147,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":46125,"byte_end":46129,"line_start":154,"line_end":154,"column_start":12,"column_end":16},"name":"stop","qualname":"<ScheduleHandle>::stop","value":"pub fn stop(Self)","parent":null,"children":[],"decl_id":null,"docs":" Halt the scheduler background thread\n","sig":null,"attributes":[{"value":"/ Halt the scheduler background thread","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":46073,"byte_end":46113,"line_start":153,"line_end":153,"column_start":5,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":198},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\timeprovider.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"timeprovider","qualname":"::timeprovider","value":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\timeprovider.rs","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":202},{"krate":0,"index":203}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":199},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\timeprovider.rs","byte_start":53401,"byte_end":53413,"line_start":5,"line_end":5,"column_start":11,"column_end":23},"name":"TimeProvider","qualname":"::timeprovider::TimeProvider","value":"TimeProvider","parent":null,"children":[{"krate":0,"index":200}],"decl_id":null,"docs":" A trait for providing custom time providers. `TimeProvider`s are used to\n specify where the source of DateTimes used by the scheduler. For most\n purposes, the default `ChronoTimeProvider` is sufficient; the main\n use case for custom `TimeProvider`s is for writing tests.\n","sig":null,"attributes":[{"value":"/ A trait for providing custom time providers. `TimeProvider`s are used to","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\timeprovider.rs","byte_start":53107,"byte_end":53183,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"/ specify where the source of DateTimes used by the scheduler. For most","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\timeprovider.rs","byte_start":53184,"byte_end":53257,"line_start":2,"line_end":2,"column_start":1,"column_end":74}},{"value":"/ purposes, the default `ChronoTimeProvider` is sufficient; the main","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\timeprovider.rs","byte_start":53258,"byte_end":53328,"line_start":3,"line_end":3,"column_start":1,"column_end":71}},{"value":"/ use case for custom `TimeProvider`s is for writing tests.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\timeprovider.rs","byte_start":53329,"byte_end":53390,"line_start":4,"line_end":4,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\timeprovider.rs","byte_start":53487,"byte_end":53490,"line_start":7,"line_end":7,"column_start":8,"column_end":11},"name":"now","qualname":"::timeprovider::TimeProvider::now","value":"pub fn now<Tz>(&Tz) -> chrono::DateTime<Tz> where Tz: chrono::TimeZone +\nSync + Send","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns the current time, according to the TimeProvider\n","sig":null,"attributes":[{"value":"/ Returns the current time, according to the TimeProvider","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\timeprovider.rs","byte_start":53420,"byte_end":53479,"line_start":6,"line_end":6,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":202},"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\timeprovider.rs","byte_start":53677,"byte_end":53695,"line_start":13,"line_end":13,"column_start":12,"column_end":30},"name":"ChronoTimeProvider","qualname":"::timeprovider::ChronoTimeProvider","value":"ChronoTimeProvider {  }","parent":null,"children":[],"decl_id":null,"docs":" The default TimeProvider. It returns the time according to the system clock.\n","sig":null,"attributes":[{"value":"/ The default TimeProvider. It returns the time according to the system clock.","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\timeprovider.rs","byte_start":53585,"byte_end":53665,"line_start":12,"line_end":12,"column_start":1,"column_end":81}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":4850,"byte_end":4859,"line_start":63,"line_end":63,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":6376,"byte_end":6385,"line_start":115,"line_end":115,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":7133,"byte_end":7141,"line_start":145,"line_end":145,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":13325,"byte_end":13333,"line_start":287,"line_end":287,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":27877,"byte_end":27880,"line_start":43,"line_end":43,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":28319,"byte_end":28322,"line_start":59,"line_end":59,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":38176,"byte_end":38185,"line_start":328,"line_end":328,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":41457,"byte_end":41466,"line_start":23,"line_end":23,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":41644,"byte_end":41653,"line_start":33,"line_end":33,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":42544,"byte_end":42553,"line_start":62,"line_end":62,"column_start":14,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":44321,"byte_end":44330,"line_start":111,"line_end":111,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":46052,"byte_end":46066,"line_start":152,"line_end":152,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":46156,"byte_end":46170,"line_start":157,"line_end":157,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\timeprovider.rs","byte_start":53721,"byte_end":53739,"line_start":14,"line_end":14,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\lib.rs","byte_start":2563,"byte_end":2575,"line_start":52,"line_end":52,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":198}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":4850,"byte_end":4859,"line_start":63,"line_end":63,"column_start":6,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":282},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":6376,"byte_end":6385,"line_start":115,"line_end":115,"column_start":19,"column_end":28},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":282},"to":{"krate":0,"index":11}},{"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":7133,"byte_end":7141,"line_start":145,"line_end":145,"column_start":19,"column_end":27},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":229},"to":{"krate":0,"index":11}},{"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":13325,"byte_end":13333,"line_start":287,"line_end":287,"column_start":6,"column_end":14},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":229},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\intervals.rs","byte_start":14975,"byte_end":14980,"line_start":328,"line_end":328,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":3024},"to":{"krate":0,"index":43}},{"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":27877,"byte_end":27880,"line_start":43,"line_end":43,"column_start":29,"column_end":32},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":92},"to":{"krate":2,"index":9560}},{"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":28319,"byte_end":28322,"line_start":59,"line_end":59,"column_start":14,"column_end":17},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":92},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\job.rs","byte_start":38176,"byte_end":38185,"line_start":328,"line_end":328,"column_start":18,"column_end":27},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":127},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":41457,"byte_end":41466,"line_start":23,"line_end":23,"column_start":18,"column_end":27},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":315},"to":{"krate":2,"index":2997}},{"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":41644,"byte_end":41653,"line_start":33,"line_end":33,"column_start":6,"column_end":15},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":42544,"byte_end":42553,"line_start":62,"line_end":62,"column_start":14,"column_end":23},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":44321,"byte_end":44330,"line_start":111,"line_end":111,"column_start":10,"column_end":19},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":46052,"byte_end":46066,"line_start":152,"line_end":152,"column_start":6,"column_end":20},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":191},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\scheduler.rs","byte_start":46156,"byte_end":46170,"line_start":157,"line_end":157,"column_start":15,"column_end":29},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":191},"to":{"krate":2,"index":3258}},{"span":{"file_name":"C:\\Users\\schmi\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\clokwerk-0.3.5\\src\\timeprovider.rs","byte_start":53721,"byte_end":53739,"line_start":14,"line_end":14,"column_start":23,"column_end":41},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":202},"to":{"krate":0,"index":199}}]}